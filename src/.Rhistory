}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
aicc
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n)),
error=function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
resid.process
aicc
time.pts = c(1:length(training[,"hosr"]))
time.pts = c(time.pts - min(time.pts))/max(time.pts)
gam.fit.tr = gam(training[,"hosr"]~s(time.pts))
hosr.fit.gam = fitted(gam.fit.tr)
hosr.fit.gam = ts(hosr.fit.gam,start=1980, freq=1)
resid.process = training[,"hosr"]-hosr.fit.gam
resid.process = ts(resid.process,start=1980, freq=1)
par(mfrow=c(2,2))
plot(ts_hosr,xlab="Years",ylab="Home ownership rate",type="l")
lines(hosr.fit.gam,lwd=2,col="blue")
plot(resid.process,xlab="Years",ylab="De-Trended Time Series",type="l")
acf(resid.process,main="ACF: De-trended TS")
pacf(resid.process,main="PACF: De-trended TS")
time.pts = c(1:length(training[,"hosr"]))
time.pts = c(time.pts - min(time.pts))/max(time.pts)
gam.fit.tr = gam(training[,"hosr"]~s(time.pts))
hosr.fit.gam = fitted(gam.fit.tr)
hosr.fit.gam = ts(hosr.fit.gam,start=1980, freq=4)
resid.process = training[,"hosr"]-hosr.fit.gam
resid.process = ts(resid.process,start=1980, freq=4)
par(mfrow=c(2,2))
plot(ts_hosr,xlab="Years",ylab="Home ownership rate",type="l")
lines(hosr.fit.gam,lwd=2,col="blue")
plot(resid.process,xlab="Years",ylab="De-Trended Time Series",type="l")
acf(resid.process,main="ACF: De-trended TS")
pacf(resid.process,main="PACF: De-trended TS")
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n)),
error=function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
resid.process
fit <-arima(resid.process,order = c(4,0,1), method='ML')
fit$aic
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n)),
print(aicc)
error=function(e) e
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n)),
error=function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
print(aicc)
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n)),
error=function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
porder = aicc$p[1]
dorder = aicc$d[1]
qorder = aicc$q[1]
aicc
final_model.1 = arima(resid.process,order = c(porder,dorder,qorder), method='ML')
resids.1 = resid(final_model.1)
## Residual Analysis
par (mfrow=c(2,2))
plot(resids.1, ylab='Standardized Residuals')
abline(h=0)
acf(resids.1,main= 'ACF of the Model Residuals')
pacf(resids.1,main='PACF of the Model Residuals')
qqnorm(resids.1)
qqline(resids.1)
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m1.orders = (aicc$p[1],aicc$d[1],aicc$q[1])
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m1.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
final_model.1 = arima(resid.process,order = m1.orders, method='ML')
resids.1 = resid(final_model.1)
## Residual Analysis
par (mfrow=c(2,2))
plot(resids.1, ylab='Standardized Residuals')
abline(h=0)
acf(resids.1,main= 'ACF of the Model Residuals')
pacf(resids.1,main='PACF of the Model Residuals')
qqnorm(resids.1)
qqline(resids.1)
n = length(training[,"hosr"])
n
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m2.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
aicc
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(resid.process,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m1.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
aicc
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n))
}
}
}
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m2.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
aicc
training[,"hosr"]
resid.process
n = length(resid.process)
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
test_arima <- function(train,p,d,q,n){
fit <-arima(train,order = c(p,d,q), method='ML')
curr.aicc <- fit$aic-2*(p+q+1)+2*(p+q+1)*n/(n-p-q-2)
df <- data.frame(p,d,q,curr.aicc)
names(df) <- c("p","d","q","aicc")
return(df)
}
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(resid.process,p,d,q,n))
}
}
}
aicc <- aicc[order(aicc$aicc),]
m1.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n))
}
}
}
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n))
}
}
}
View(aicc)
View(aicc)
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc = rbind(aicc,test_arima(training[,"hosr"],p,d,q,n)),
error = function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
n = length(training[,"hosr"])
norder = 6
aicc <- data.frame(Inf,Inf,Inf,Inf)
names(aicc) <- c("p","d","q","aicc")
for(p in 1:norder){
for(d in 0:1){
for(q in 1:norder){
possibleError <- tryCatch(
aicc <- rbind(aicc,test_arima(training[,"hosr"],p,d,q,n)),
error = function(e) e
)
if(inherits(possibleError,"error")) next
}
}
}
aicc <- aicc[order(aicc$aicc),]
m2.orders = c(aicc$p[1],aicc$d[1],aicc$q[1])
final_model.2 = arima(traing[,"hosr"], order = m2.orders, method = "ML")
final_model.2 = arima(training[,"hosr"], order = m2.orders, method = "ML")
resids.2 = resid(final_model.2)
## Residual Analysis
par (mfrow=c(2,2))
plot(resids.2, ylab='Standardized Residuals')
abline(h=0)
acf(resids.2,main= 'ACF of the Model Residuals')
pacf(resids.2,main='PACF of the Model Residuals')
qqnorm(resids.2)
qqline(resids.2)
n <-length(hosr$hosr)
var_data_train <- cbind(ts_cpi,ts_dispic,ts_fedfunds,ts_gdp,
ts_hosr,ts_icsa,ts_mspus,ts_payem,ts_permit,
ts_sp500,ts_umcsent,ts_unrate)
var_data_train <- var_data_train[1:(n-5),]
var_data_train
n <-length(hosr$hosr)
var_data_train <- cbind(ts_cpi,ts_dispic,ts_fedfunds,ts_gdp,
ts_hosr,ts_icsa,ts_mspus,ts_payem,ts_permit,
ts_sp500,ts_umcsent,ts_unrate)
var_data_train <- var_data_train[1:(n-5),]
VARselect(var_data_train, lag.max = 20)$selection
library(vars)
n <-length(hosr$hosr)
var_data_train <- cbind(ts_cpi,ts_dispic,ts_fedfunds,ts_gdp,
ts_hosr,ts_icsa,ts_mspus,ts_payem,ts_permit,
ts_sp500,ts_umcsent,ts_unrate)
var_data_train <- var_data_train[1:(n-5),]
VARselect(var_data_train, lag.max = 20)$selection
model.var=VAR(ddata.train, p=12)
model.var=VAR(var_data_train, p=12)
summary(model.var)
model.var=VAR(var_data_train, p=11)
summary(model.var)
## Model Fitting: Restricted VAR
model.var.restrict=restrict(model.var)
summary(model.var.restrict)
n <-length(hosr$hosr)
var_data_train <- cbind(ts_cpi,ts_dispic,ts_fedfunds,ts_gdp,
ts_hosr,ts_icsa,ts_mspus,ts_payem,ts_permit,
ts_sp500,ts_umcsent,ts_unrate)
var_data_train <- var_data_train[1:(n-5),]
VARselect(var_data_train, lag.max = 8)$selection
model.var=VAR(var_data_train, p=4)
summary(model.var)
## Model Fitting: Restricted VAR
model.var.restrict=restrict(model.var)
summary(model.var.restrict)
library(aod)
View(model.var)
View(model.var)
summary(model.var$varresult$ts_hosr)
model.var=VAR(var_data_train, p=4)
summary(model.var$varresult$ts_hosr)
## Model Fitting: Restricted VAR
model.var.restrict=restrict(model.var)
summary(model.var.restrict$varresult$ts_hosr)
coefficients(model.var)$ts_hosr
coefficients(model.var)$ts_hosr[-(12*4+1),1]
vcov(model.var)
var.model = vcov(model.var)
View(var.model)
var.model.index
index(var.model)
var.model=ts_hosr:ts_cpi.l1
coef.hosr = coefficients(model.var)$ts_hosr[-(12*4+1),1]
var.model = vcov(model.var)[197:244,197:244]
## Granger Causality: CPI
wald.test(b=coef.moosepop, var.model, Terms=seq(1, 12*4, 12))
coef.hosr = coefficients(model.var)$ts_hosr[-(12*4+1),1]
var.model = vcov(model.var)[197:244,197:244]
## Granger Causality: CPI
wald.test(b=coef.hosr, var.model, Terms=seq(1, 12*4, 12))
## Granger Causality: disposible income
wald.test(b=coef.hosr, var.model, Terms=seq(2, 12*4, 12))
## Granger Causality: interet rate
wald.test(b=coef.hosr, var.model, Terms=seq(3, 12*4, 12))
## Granger Causality: gdp
wald.test(b=coef.hosr, var.model, Terms=seq(4, 12*4, 12))
## Granger Causality: innial claims
wald.test(b=coef.hosr, var.model, Terms=seq(6, 12*4, 12))
## Granger Causality: median housing price
wald.test(b=coef.hosr, var.model, Terms=seq(7, 12*4, 12))
## Granger Causality: non farm payroll
wald.test(b=coef.hosr, var.model, Terms=seq(8, 12*4, 12))
## Granger Causality: housing permit
wald.test(b=coef.hosr, var.model, Terms=seq(9, 12*4, 12))
## Granger Causality: sp500
wald.test(b=coef.hosr, var.model, Terms=seq(10, 12*4, 12))
## Granger Causality: consumer sentiments
wald.test(b=coef.hosr, var.model, Terms=seq(11, 12*4, 12))
## Granger Causality: unemployment rate
wald.test(b=coef.hosr, var.model, Terms=seq(12, 12*4, 12))
coef.hosr = coefficients(model.var)$ts_hosr[-(12*4+1),1]
var.model = vcov(model.var)[197:244,197:244]
## Granger Causality: CPI
print("CPI")
wald.test(b=coef.hosr, var.model, Terms=seq(1, 12*4, 12))
## Granger Causality: disposible income
print("disposible income")
wald.test(b=coef.hosr, var.model, Terms=seq(2, 12*4, 12))
## Granger Causality: interet rate
print("interet rate")
wald.test(b=coef.hosr, var.model, Terms=seq(3, 12*4, 12))
## Granger Causality: gdp
print("gdp")
wald.test(b=coef.hosr, var.model, Terms=seq(4, 12*4, 12))
## Granger Causality: innial claims
print("innial claims")
wald.test(b=coef.hosr, var.model, Terms=seq(6, 12*4, 12))
## Granger Causality: median housing price
print("median housing price")
wald.test(b=coef.hosr, var.model, Terms=seq(7, 12*4, 12))
## Granger Causality: non farm payroll
print("non farm payroll")
wald.test(b=coef.hosr, var.model, Terms=seq(8, 12*4, 12))
## Granger Causality: housing permit
print("housing permit")
wald.test(b=coef.hosr, var.model, Terms=seq(9, 12*4, 12))
## Granger Causality: sp500
print("sp500")
wald.test(b=coef.hosr, var.model, Terms=seq(10, 12*4, 12))
## Granger Causality: consumer sentiments
print("consumer sentiments")
wald.test(b=coef.hosr, var.model, Terms=seq(11, 12*4, 12))
## Granger Causality: unemployment rate
print("unemployment rate")
wald.test(b=coef.hosr, var.model, Terms=seq(12, 12*4, 12))
